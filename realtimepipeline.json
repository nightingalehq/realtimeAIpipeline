{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.3.539.46024",
      "templateHash": "4291159807684246038"
    }
  },
  "functions": [],
  "variables": {
    "rg": "[resourceGroup().name]",
    "location": "[resourceGroup().location]",
    "apiFragment": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', variables('location'), '/managedApis/')]",
    "managedResourceGroupName": "[format('{0}/resourceGroups/databricks-rg-db-{1}', subscription().id, uniqueString(variables('rg'), resourceGroup().id))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-02-01",
      "name": "[concat(variables('rg'), 'store')]",
      "kind": "StorageV2",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard_LRS"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-02-01",
      "name": "[concat(concat(variables('rg'), 'store'), '/default/tweets')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', concat(variables('rg'), 'store'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-02-01",
      "name": "[concat(concat(variables('rg'), 'store'), '/default/images')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', concat(variables('rg'), 'store'))]"
      ]
    },
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2017-04-18",
      "name": "[concat(variables('rg'), 'cogsvc')]",
      "location": "[variables('location')]",
      "kind": "CognitiveServices",
      "sku": {
        "name": "S0"
      }
    },
    {
      "type": "Microsoft.Databricks/workspaces",
      "apiVersion": "2018-04-01",
      "name": "[concat(variables('rg'), 'databricks')]",
      "location": "[variables('location')]",
      "properties": {
        "managedResourceGroupId": "[variables('managedResourceGroupName')]"
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[concat(variables('rg'), 'blob')]",
      "location": "[variables('location')]",
      "properties": {
        "api": {
          "id": "[concat(variables('apiFragment'), 'azureblob')]"
        },
        "parameterValues": {
          "accessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', concat(variables('rg'), 'store')), '2021-02-01')[1]]",
          "accountName": "[concat(variables('rg'), 'store')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', concat(variables('rg'), 'store'))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[concat(variables('rg'), 'twitter')]",
      "location": "[variables('location')]",
      "properties": {
        "api": {
          "id": "[concat(variables('apiFragment'), 'twitter')]"
        },
        "customParameterValues": {}
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2019-05-01",
      "name": "[concat(variables('rg'), 'logic')]",
      "location": "[variables('location')]",
      "properties": {
        "state": "Enabled",
        "parameters": {
          "connections": {
            "value": {
              "azureblob": {
                "connectionId": "[resourceId('Microsoft.Web/connections', concat(variables('rg'), 'blob'))]",
                "connectionName": "store",
                "id": "[concat(variables('apiFragment'), 'azureblob')]"
              },
              "twitter": {
                "connectionId": "[resourceId('Microsoft.Web/connections', concat(variables('rg'), 'twitter'))]",
                "connectionName": "twitter",
                "id": "[concat(variables('apiFragment'), 'twitter')]"
              }
            }
          }
        },
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "triggers": {
            "recurrence": {
              "type": "recurrence",
              "recurrence": {
                "frequency": "Minute",
                "interval": 1
              }
            }
          },
          "actions": {
            "Search_Tweets": {
              "description": "This performs a poll of tweets",
              "runAfter": {},
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['twitter']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/searchtweets",
                "queries": {
                  "maxResults": 50,
                  "searchQuery": "#dataceili"
                }
              }
            },
            "Create_CSV": {
              "description": "Flatten tweets down for simplicity",
              "runAfter": {
                "Search_Tweets": "Succeeded"
              },
              "type": "Table",
              "inputs": {
                "format": "CSV",
                "from": "@body('Search_Tweets')"
              }
            },
            "Store_CSV": {
              "description": "Ship the CSV to blob store - mimics new data arriving near real-time",
              "runAfter": {
                "Create_CSV": "Succeeded"
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/datasets/default/files",
                "queries": {
                  "folderPath": "tweets",
                  "name": "@{concat(utcNow(),'.csv')}",
                  "queryParametersSingleEncoded": true
                }
              },
              "runtimeConfiguration": {
                "contentTransfer": {
                  "transferMode": "Chunked"
                }
              }
            },
            "Process_for_images": {
              "description": "Iterate to find tweets with images to store",
              "runAfter": {
                "Store_CSV": "Succeeded"
              },
              "type": "Foreach",
              "foreach": "@body('Search_Tweets')",
              "actions": {
                "Process_media_URLS": {
                  "description": "Iterate through each media URL",
                  "runAfter": {},
                  "type": "Foreach",
                  "foreach": "@body('Search_Tweets')",
                  "actions": {
                    "Fetch_Image": {
                      "description": "HTTP GET call to retrieve media",
                      "runAfter": {},
                      "type": "Http",
                      "inputs": {
                        "method": "Get",
                        "uri": "@{item()}"
                      }
                    },
                    "Store_Image": {
                      "description": "Ship the CSV to blob store - mimics new data arriving near real-time",
                      "runAfter": {
                        "Fetch_Image": "Succeeded"
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azureblob']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/datasets/default/files",
                        "queries": {
                          "folderPath": "images",
                          "name": "@{uriPath(item())}",
                          "queryParametersSingleEncoded": true
                        }
                      },
                      "runtimeConfiguration": {
                        "contentTransfer": {
                          "transferMode": "Chunked"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', concat(variables('rg'), 'blob'))]",
        "[resourceId('Microsoft.Web/connections', concat(variables('rg'), 'twitter'))]"
      ]
    }
  ],
  "outputs": {
    "dbId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Databricks/workspaces', concat(variables('rg'), 'databricks'))]"
    }
  }
}